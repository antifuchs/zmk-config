/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define SYM_L   1
#define NUM_L   2
#define NAV_L   3

#define CUT   LG(X)
#define COPY  LG(C)
#define PASTE LG(V)

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word_left, &caps_word, 13 14, 60)
        COMBO(caps_word_right, &caps_word, 15 16, 60)

        COMBO(grave, &kp GRAVE, 1 2, 60)
        COMBO(pipe, &kp PIPE, 3 4, 60)

        COMBO(amp, &kp AMPS, 5 6, 60)
        COMBO(colon, &kp EQUAL, 7 8, 60)

        COMBO(lpar, &kp LPAR, 21 22, 60)
        COMBO(rpar, &kp RPAR, 27 28, 60)

        COMBO(dash, &kp MINUS, 22 23, 60)
        COMBO(under, &kp UNDERSCORE, 26 27, 60)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <20>;
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
            hold-while-undecided;
            
            // The right half:
            hold-trigger-key-positions = <
                5   6  7  8  9 
                15 16 17 18 19 
                25 26 27 28 29 

                30 31 32 
                33 34 35
            >;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <20>;
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
            hold-while-undecided;
            
            // The left half:
            hold-trigger-key-positions = <
                 0  1  2  3  4 
                10 11 12 13 14 
                20 21 22 23 24 
                
                      30 31 32
                      33 34 35
            >;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        rpt_lt: repeat_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEAT_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&key_repeat>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings =  <
                   &kp Q        &kp W         &kp E              &kp R               &kp T              &kp Y              &kp U               &kp I                 &kp O           &kp P 
                   &lhm LALT A  &lhm LCTRL S  &lhm LGUI D        &lhm LSHFT F        &kp G              &kp H              &rhm RSHFT J        &rhm RGUI K           &rhm RCTRL L    &rhm RALT SEMI
                   &kp Z        &kp X         &kp C              &kp V               &kp B              &kp N              &kp M               &kp COMMA             &kp DOT         &kp FSLH
                  /*&          &*/           &base_lt NAV_L BKSP &base_lt SYM_L TAB &base_lt NUM_L ESC &base_lt NUM_L TAB &base_lt SYM_L RET  &base_lt NAV_L SPC    /*&             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &kp APOS     &kp LT        &kp GT        &kp DQT            &kp AMPS           &scope              &kp DOT          &kp LBRC                 &kp RBRC      &kp PRCNT
                   &kp EXCL     &kp MINUS     &kp PLUS      &kp EQUAL          &kp PIPE           &kp COLON           &kp HASH         &kp LPAR                 &kp RPAR      &kp AT
                   &kp CARET    &kp FSLH      &kp STAR      &kp BSLH           &kp TILDE          &lambda             &kp DLLR         &kp LBKT                 &kp RBKT      &kp QMARK
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans                 /*&             &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp F10      &kp F6        &kp F5        &kp F4             &kp STAR           &kp PLUS            &kp N4           &kp N5                   &kp N6        &kp UNDER
                   &kp F11      &kp F3        &kp F2        &kp F1             &sk LSHFT          &kp MINUS           &kp N1           &kp N2                   &kp N3        &kp DOT
                   &kp F12      &kp F9        &kp F8        &kp F7             &kp COLON          &kp EQUAL           &kp N7           &kp N8                   &kp N9        &kp COMMA
				 /*&            &*/           &trans        &trans             &kp N0             &kp N0              &trans           &trans                 /*&             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &trans       &trans        &trans        &trans             &bt BT_CLR         &bt BT_PRV          &bt BT_NXT       &trans               &trans        &trans
                   &sk LALT     &sk LGUI      &sk LSHFT     &sk LCTRL          &trans             &trans              &kp LEFT         &kp DOWN             &kp UP        &kp RIGHT
                   &trans       &kp CUT       &kp COPY      &kp PASTE          &trans             &trans              &kp HOME         &kp K_PREV           &kp K_NEXT    &kp END
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans             /*&             &*/
			>;
		};
	};
};
